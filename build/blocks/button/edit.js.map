{"version":3,"file":"blocks/button/edit.js","mappings":"mCAAAA,EAAOC,QAAUC,OAAW,GAAe,W,eCCvCC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,CCtBA,MAAM,EAA+BC,OAAW,GAAQ,K,QCAnBA,OAAW,GAAc,WCAzBA,OAAW,GAAW,Q,SCqClDO,EAAAA,EAAAA,IAAI,aAAc,cAKlBA,EAAAA,EAAAA,IAAI,eAAgB,cAKpBA,EAAAA,EAAAA,IAAI,cAAe,cAKnBA,EAAAA,EAAAA,IAAI,OAAQ,Y","sources":["webpack://formiflex/external window [\"wp\",\"blockEditor\"]","webpack://formiflex/webpack/bootstrap","webpack://formiflex/external window [\"wp\",\"i18n\"]","webpack://formiflex/external window [\"wp\",\"components\"]","webpack://formiflex/external window [\"wp\",\"element\"]","webpack://formiflex/./src/blocks/button/edit.js"],"sourcesContent":["module.exports = window[\"wp\"][\"blockEditor\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","import { __ } from '@wordpress/i18n';\n\nimport {\n\tuseBlockProps,\n\tBlockControls,\n\tInspectorAdvancedControls,\n\tRichText,\n\t__experimentalUseBorderProps as useBorderProps,\n\t__experimentalUseColorProps as useColorProps,\n} from '@wordpress/block-editor';\n\nimport {\n\tSelectControl,\n\tToggleControl,\n\tToolbarDropdownMenu,\n\tToolbarGroup,\n} from '@wordpress/components';\nimport { useState } from '@wordpress/element';\nimport clsx from 'clsx';\nimport {\n\tLoading,\n\tLoading2,\n\tPulse,\n\tLoading4,\n\tLoadingCircles,\n\tLoadingCirclePath,\n\tAudio,\n\tBallTriangle,\n\tBars,\n\tCircles,\n\tGrid,\n\tThreeDots,\n} from '../../icons/loading';\n\nconst ALIGNMENT_CONTROLS = [\n\t{\n\t\ticon: 'align-left',\n\t\ttitle: __( 'Align Left', 'formiflex' ),\n\t\talign: 'left',\n\t},\n\t{\n\t\ticon: 'align-center',\n\t\ttitle: __( 'Align Center', 'formiflex' ),\n\t\talign: 'center',\n\t},\n\t{\n\t\ticon: 'align-right',\n\t\ttitle: __( 'Align Right', 'formiflex' ),\n\t\talign: 'right',\n\t},\n\t{\n\t\ticon: 'align-wide',\n\t\ttitle: __( 'Wide', 'formiflex' ),\n\t\talign: 'wide',\n\t},\n];\n\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { type, alignment, noWrapper } = attributes;\n\n\tconst icons = {\n\t\tLoading,\n\t\tLoading2,\n\t\tPulse,\n\t\tLoading4,\n\t\tLoadingCircles,\n\t\tLoadingCirclePath,\n\t\tAudio,\n\t\tBallTriangle,\n\t\tBars,\n\t\tCircles,\n\t\tGrid,\n\t\tThreeDots,\n\t};\n\n\tconst ButtonIcon = icons[ type ];\n\n\tconst [ showIcon, setShowIcon ] = useState( false );\n\n\t// not already merged in Gutenberg\n\t// const spacingProps = useSpacingProps( attributes );\n\n\tconst colorProps = useColorProps( attributes );\n\tconst borderProps = useBorderProps( attributes );\n\n\tconst buttonClasses = clsx(\n\t\t'wp-element-button',\n\t\tborderProps.className,\n\t\tcolorProps.className,\n\t\t{\n\t\t\t'wp-block-formiflex-button--loading': showIcon,\n\t\t}\n\t);\n\n\tconst blockProps = useBlockProps( {\n\t\tclassName: alignment,\n\t} );\n\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t<button className={ buttonClasses } style={ colorProps.style }>\n\t\t\t\t{ ! noWrapper && (\n\t\t\t\t\t<BlockControls>\n\t\t\t\t\t\t<ToolbarGroup>\n\t\t\t\t\t\t\t<ToolbarDropdownMenu\n\t\t\t\t\t\t\t\ticon={ 'align-' + alignment }\n\t\t\t\t\t\t\t\tlabel={ __( 'Align' ) }\n\t\t\t\t\t\t\t\tcontrols={ ALIGNMENT_CONTROLS.map(\n\t\t\t\t\t\t\t\t\t( control ) => {\n\t\t\t\t\t\t\t\t\t\tconst { align } = control;\n\t\t\t\t\t\t\t\t\t\tconst isActive = align === alignment;\n\n\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t...control,\n\t\t\t\t\t\t\t\t\t\t\tisActive,\n\t\t\t\t\t\t\t\t\t\t\tonClick: () =>\n\t\t\t\t\t\t\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t\t\t\t\t\t\talignment: align,\n\t\t\t\t\t\t\t\t\t\t\t\t} ),\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ToolbarGroup>\n\t\t\t\t\t</BlockControls>\n\t\t\t\t) }\n\t\t\t\t<InspectorAdvancedControls>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tlabel={ __( 'Preview Icon', 'formiflex' ) }\n\t\t\t\t\t\tchecked={ showIcon }\n\t\t\t\t\t\tonChange={ ( val ) => {\n\t\t\t\t\t\t\tsetShowIcon( val );\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectControl\n\t\t\t\t\t\tlabel={ __( 'Icon type', 'formiflex' ) }\n\t\t\t\t\t\tvalue={ attributes.type }\n\t\t\t\t\t\toptions={ Object.keys( icons ).map( ( icon ) => {\n\t\t\t\t\t\t\treturn { label: icon, value: icon };\n\t\t\t\t\t\t} ) }\n\t\t\t\t\t\tonChange={ ( val ) => {\n\t\t\t\t\t\t\tsetAttributes( { type: val } );\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t</InspectorAdvancedControls>\n\t\t\t\t<RichText\n\t\t\t\t\ttagName=\"span\"\n\t\t\t\t\tvalue={ attributes.text }\n\t\t\t\t\tonChange={ ( val ) => setAttributes( { text: val } ) }\n\t\t\t\t\tplaceholder={ __( 'Enter button textâ€¦', 'formiflex' ) }\n\t\t\t\t\tallowedFormats={ [ 'core/bold' ] }\n\t\t\t\t/>\n\t\t\t\t<ButtonIcon />\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n"],"names":["module","exports","window","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","__"],"sourceRoot":""}